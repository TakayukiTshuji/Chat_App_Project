{"ast":null,"code":"var _jsxFileName = \"D:\\\\web-tutrial\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst textSend = () => {\n  _s();\n  const [text, settext] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: text,\n      onChange: event => settext(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n_s(textSend, \"zaQ+z02P7G7XRu3x53pe4txypBM=\");\nfunction App() {\n  /*const InputCheckBox=()=>{\n    const [CheckedValues,setCheckedValues]=useState([]);\n    const handleChange=(e)=>{\n      if(CheckedValues.includes(e.target.value)){\n        setCheckedValues(\n          CheckedValues.filter((checkedValue)=>\n           checkedValue !==e.target.value)\n        );\n      }else{\n        setCheckedValues([...CheckedValues,e.target.value]);\n      }\n    };\n    return (\n      <div className=\"App\">\n        <p>\n          現在選択されている画面値: <b>{CheckedValues.join(\",\")}</b>\n        </p>\n        <label>\n          <input \n          type=\"checkbox\" \n          value=\"マウス\"\n          onChange={handleChange}\n          checked={CheckedValues.includes(\"マウス\")}\n          />\n          マウス\n        </label>\n        <label>\n          <input\n            type=\"checkbox\"\n            value=\"モニター\"\n            onChange={handleChange}\n            checked={CheckedValues.includes(\"モニター\")}\n          />\n          モニター\n        </label>\n        <label>\n          <input \n            type=\"checkbox\"\n            value=\"キーボード\"\n            onChange={handleChange}\n            checked={CheckedValues.includes(\"キーボード\")}\n          />\n          キーボード\n        </label>\n      </div>\n    );\n  };*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"textSend\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","textSend","_s","text","settext","children","value","onChange","event","target","fileName","_jsxFileName","lineNumber","columnNumber","App","_c","$RefreshReg$"],"sources":["D:/web-tutrial/src/App.js"],"sourcesContent":["import React,{useState} from \"react\";\nimport \"./App.css\";\n\nconst textSend = () => {\n  const [text,settext] = useState(\"\");\n  return (\n    <div>\n      <input\n       value={text}\n       onChange={(event)=>settext(event.target.value)}\n      />\n      <p>{text}</p>\n    </div>\n  );\n};\nfunction App() {\n  /*const InputCheckBox=()=>{\n    const [CheckedValues,setCheckedValues]=useState([]);\n    const handleChange=(e)=>{\n      if(CheckedValues.includes(e.target.value)){\n        setCheckedValues(\n          CheckedValues.filter((checkedValue)=>\n           checkedValue !==e.target.value)\n        );\n      }else{\n        setCheckedValues([...CheckedValues,e.target.value]);\n      }\n    };\n    return (\n      <div className=\"App\">\n        <p>\n          現在選択されている画面値: <b>{CheckedValues.join(\",\")}</b>\n        </p>\n        <label>\n          <input \n          type=\"checkbox\" \n          value=\"マウス\"\n          onChange={handleChange}\n          checked={CheckedValues.includes(\"マウス\")}\n          />\n          マウス\n        </label>\n        <label>\n          <input\n            type=\"checkbox\"\n            value=\"モニター\"\n            onChange={handleChange}\n            checked={CheckedValues.includes(\"モニター\")}\n          />\n          モニター\n        </label>\n        <label>\n          <input \n            type=\"checkbox\"\n            value=\"キーボード\"\n            onChange={handleChange}\n            checked={CheckedValues.includes(\"キーボード\")}\n          />\n          キーボード\n        </label>\n      </div>\n    );\n  };*/\n\n  return (\n    <div>\n      <textSend/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAEC,QAAQ,QAAO,OAAO;AACpC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,IAAI,EAACC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACnC,oBACEE,OAAA;IAAAK,QAAA,gBACEL,OAAA;MACCM,KAAK,EAAEH,IAAK;MACZI,QAAQ,EAAGC,KAAK,IAAGJ,OAAO,CAACI,KAAK,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC,eACFb,OAAA;MAAAK,QAAA,EAAIF;IAAI;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEV,CAAC;AAACX,EAAA,CAXID,QAAQ;AAYd,SAASa,GAAGA,CAAA,EAAG;EACb;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,oBACEd,OAAA;IAAAK,QAAA,eACEL,OAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAU;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEV;AAACE,EAAA,GAtDQD,GAAG;AAwDZ,eAAeA,GAAG;AAAC,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}