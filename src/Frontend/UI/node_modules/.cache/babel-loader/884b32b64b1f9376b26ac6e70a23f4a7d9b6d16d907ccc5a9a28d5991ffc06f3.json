{"ast":null,"code":"var _jsxFileName = \"D:\\\\web-tutrial\\\\src\\\\App.js\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  var _s = $RefreshSig$();\n  const textSend = () => {\n    _s();\n    const [text, settext] = useState(\"\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: text,\n        onChange: event => settext(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this);\n  };\n  /*const InputCheckBox=()=>{\n    const [CheckedValues,setCheckedValues]=useState([]);\n    const handleChange=(e)=>{\n      if(CheckedValues.includes(e.target.value)){\n        setCheckedValues(\n          CheckedValues.filter((checkedValue)=>\n           checkedValue !==e.target.value)\n        );\n      }else{\n        setCheckedValues([...CheckedValues,e.target.value]);\n      }\n    };\n    return (\n      <div className=\"App\">\n        <p>\n          現在選択されている画面値: <b>{CheckedValues.join(\",\")}</b>\n        </p>\n        <label>\n          <input \n          type=\"checkbox\" \n          value=\"マウス\"\n          onChange={handleChange}\n          checked={CheckedValues.includes(\"マウス\")}\n          />\n          マウス\n        </label>\n        <label>\n          <input\n            type=\"checkbox\"\n            value=\"モニター\"\n            onChange={handleChange}\n            checked={CheckedValues.includes(\"モニター\")}\n          />\n          モニター\n        </label>\n        <label>\n          <input \n            type=\"checkbox\"\n            value=\"キーボード\"\n            onChange={handleChange}\n            checked={CheckedValues.includes(\"キーボード\")}\n          />\n          キーボード\n        </label>\n      </div>\n    );\n  };*/\n  _s(textSend, \"zaQ+z02P7G7XRu3x53pe4txypBM=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"textSend\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","$RefreshSig$","textSend","text","settext","children","value","onChange","event","target","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/web-tutrial/src/App.js"],"sourcesContent":["import React,{useState} from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const textSend=()=>{\n    const [text,settext]=useState(\"\");\n    return (\n      <div>\n        <input\n         value={text}\n         onChange={(event)=>settext(event.target.value)}\n        />\n        <p>{text}</p>\n      </div>\n    );\n  };\n  /*const InputCheckBox=()=>{\n    const [CheckedValues,setCheckedValues]=useState([]);\n    const handleChange=(e)=>{\n      if(CheckedValues.includes(e.target.value)){\n        setCheckedValues(\n          CheckedValues.filter((checkedValue)=>\n           checkedValue !==e.target.value)\n        );\n      }else{\n        setCheckedValues([...CheckedValues,e.target.value]);\n      }\n    };\n    return (\n      <div className=\"App\">\n        <p>\n          現在選択されている画面値: <b>{CheckedValues.join(\",\")}</b>\n        </p>\n        <label>\n          <input \n          type=\"checkbox\" \n          value=\"マウス\"\n          onChange={handleChange}\n          checked={CheckedValues.includes(\"マウス\")}\n          />\n          マウス\n        </label>\n        <label>\n          <input\n            type=\"checkbox\"\n            value=\"モニター\"\n            onChange={handleChange}\n            checked={CheckedValues.includes(\"モニター\")}\n          />\n          モニター\n        </label>\n        <label>\n          <input \n            type=\"checkbox\"\n            value=\"キーボード\"\n            onChange={handleChange}\n            checked={CheckedValues.includes(\"キーボード\")}\n          />\n          キーボード\n        </label>\n      </div>\n    );\n  };*/\n\n  return (\n    <div>\n      <textSend/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAEC,QAAQ,QAAO,OAAO;AACpC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACb,MAAMC,QAAQ,GAACA,CAAA,KAAI;IAAAF,EAAA;IACjB,MAAM,CAACG,IAAI,EAACC,OAAO,CAAC,GAACR,QAAQ,CAAC,EAAE,CAAC;IACjC,oBACEE,OAAA;MAAAO,QAAA,gBACEP,OAAA;QACCQ,KAAK,EAAEH,IAAK;QACZI,QAAQ,EAAGC,KAAK,IAAGJ,OAAO,CAACI,KAAK,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/C,CAAC,eACFf,OAAA;QAAAO,QAAA,EAAIF;MAAI;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC;EAEV,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EA9CEb,EAAA,CAZME,QAAQ;EA4Dd,oBACEJ,OAAA;IAAAO,QAAA,eACEP,OAAA;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAU;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEV;AAACC,EAAA,GAlEQf,GAAG;AAoEZ,eAAeA,GAAG;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}